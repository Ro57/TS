// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tokens/issuer/issuer.proto

package issuer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	replicator "github.com/pkt-cash/pktd/lnd/lnrpc/tokens/replicator"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignTokenPurchaseRequest struct {
	Offer                *replicator.TokenOffer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SignTokenPurchaseRequest) Reset()         { *m = SignTokenPurchaseRequest{} }
func (m *SignTokenPurchaseRequest) String() string { return proto.CompactTextString(m) }
func (*SignTokenPurchaseRequest) ProtoMessage()    {}
func (*SignTokenPurchaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8faa554d9d56586, []int{0}
}

func (m *SignTokenPurchaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTokenPurchaseRequest.Unmarshal(m, b)
}
func (m *SignTokenPurchaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTokenPurchaseRequest.Marshal(b, m, deterministic)
}
func (m *SignTokenPurchaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTokenPurchaseRequest.Merge(m, src)
}
func (m *SignTokenPurchaseRequest) XXX_Size() int {
	return xxx_messageInfo_SignTokenPurchaseRequest.Size(m)
}
func (m *SignTokenPurchaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTokenPurchaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTokenPurchaseRequest proto.InternalMessageInfo

func (m *SignTokenPurchaseRequest) GetOffer() *replicator.TokenOffer {
	if m != nil {
		return m.Offer
	}
	return nil
}

type SignTokenPurchaseResponse struct {
	IssuerSignature      string   `protobuf:"bytes,1,opt,name=issuer_signature,json=issuerSignature,proto3" json:"issuer_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTokenPurchaseResponse) Reset()         { *m = SignTokenPurchaseResponse{} }
func (m *SignTokenPurchaseResponse) String() string { return proto.CompactTextString(m) }
func (*SignTokenPurchaseResponse) ProtoMessage()    {}
func (*SignTokenPurchaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8faa554d9d56586, []int{1}
}

func (m *SignTokenPurchaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTokenPurchaseResponse.Unmarshal(m, b)
}
func (m *SignTokenPurchaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTokenPurchaseResponse.Marshal(b, m, deterministic)
}
func (m *SignTokenPurchaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTokenPurchaseResponse.Merge(m, src)
}
func (m *SignTokenPurchaseResponse) XXX_Size() int {
	return xxx_messageInfo_SignTokenPurchaseResponse.Size(m)
}
func (m *SignTokenPurchaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTokenPurchaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignTokenPurchaseResponse proto.InternalMessageInfo

func (m *SignTokenPurchaseResponse) GetIssuerSignature() string {
	if m != nil {
		return m.IssuerSignature
	}
	return ""
}

func init() {
	proto.RegisterType((*SignTokenPurchaseRequest)(nil), "issuer.SignTokenPurchaseRequest")
	proto.RegisterType((*SignTokenPurchaseResponse)(nil), "issuer.SignTokenPurchaseResponse")
}

func init() { proto.RegisterFile("tokens/issuer/issuer.proto", fileDescriptor_e8faa554d9d56586) }

var fileDescriptor_e8faa554d9d56586 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xc9, 0xcf, 0x4e,
	0xcd, 0x2b, 0xd6, 0xcf, 0x2c, 0x2e, 0x2e, 0x4d, 0x2d, 0x82, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x94, 0x12, 0x54, 0x4d, 0x51, 0x6a, 0x41, 0x4e, 0x66, 0x72, 0x62,
	0x49, 0x7e, 0x11, 0x12, 0x13, 0xa2, 0x56, 0xc9, 0x83, 0x4b, 0x22, 0x38, 0x33, 0x3d, 0x2f, 0x04,
	0xa4, 0x32, 0xa0, 0xb4, 0x28, 0x39, 0x23, 0xb1, 0x38, 0x35, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8,
	0x44, 0x48, 0x87, 0x8b, 0x35, 0x3f, 0x2d, 0x2d, 0xb5, 0x48, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb,
	0x48, 0x4c, 0x0f, 0x49, 0x37, 0x58, 0x83, 0x3f, 0x48, 0x36, 0x08, 0xa2, 0x48, 0xc9, 0x8d, 0x4b,
	0x12, 0x8b, 0x49, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x9a, 0x5c, 0x02, 0x10, 0x47, 0xc5,
	0x17, 0x67, 0xa6, 0xe7, 0x25, 0x96, 0x94, 0x16, 0xa5, 0x82, 0x4d, 0xe5, 0x0c, 0xe2, 0x87, 0x88,
	0x07, 0xc3, 0x84, 0x8d, 0x92, 0xb8, 0xd8, 0x3c, 0xc1, 0x42, 0x42, 0x11, 0x5c, 0x82, 0x18, 0x26,
	0x0a, 0x29, 0xe8, 0x41, 0xfd, 0x8a, 0xcb, 0xd9, 0x52, 0x8a, 0x78, 0x54, 0x40, 0x9c, 0xe3, 0x64,
	0x14, 0x65, 0x90, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f, 0x90, 0x5d,
	0xa2, 0x9b, 0x9c, 0x58, 0x9c, 0x01, 0x62, 0xa4, 0xe8, 0xe7, 0xe4, 0x81, 0x70, 0x51, 0x41, 0xb2,
	0x3e, 0x4a, 0x10, 0x27, 0xb1, 0x81, 0x03, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x17,
	0x8c, 0x4f, 0x7a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssuerClient is the client API for Issuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuerClient interface {
	// Returns token purchase signature for further registration along with offer via Replication Server
	SignTokenPurchase(ctx context.Context, in *SignTokenPurchaseRequest, opts ...grpc.CallOption) (*SignTokenPurchaseResponse, error)
}

type issuerClient struct {
	cc *grpc.ClientConn
}

func NewIssuerClient(cc *grpc.ClientConn) IssuerClient {
	return &issuerClient{cc}
}

func (c *issuerClient) SignTokenPurchase(ctx context.Context, in *SignTokenPurchaseRequest, opts ...grpc.CallOption) (*SignTokenPurchaseResponse, error) {
	out := new(SignTokenPurchaseResponse)
	err := c.cc.Invoke(ctx, "/issuer.Issuer/SignTokenPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServer is the server API for Issuer service.
type IssuerServer interface {
	// Returns token purchase signature for further registration along with offer via Replication Server
	SignTokenPurchase(context.Context, *SignTokenPurchaseRequest) (*SignTokenPurchaseResponse, error)
}

// UnimplementedIssuerServer can be embedded to have forward compatible implementations.
type UnimplementedIssuerServer struct {
}

func (*UnimplementedIssuerServer) SignTokenPurchase(ctx context.Context, req *SignTokenPurchaseRequest) (*SignTokenPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTokenPurchase not implemented")
}

func RegisterIssuerServer(s *grpc.Server, srv IssuerServer) {
	s.RegisterService(&_Issuer_serviceDesc, srv)
}

func _Issuer_SignTokenPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTokenPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServer).SignTokenPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.Issuer/SignTokenPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServer).SignTokenPurchase(ctx, req.(*SignTokenPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issuer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "issuer.Issuer",
	HandlerType: (*IssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignTokenPurchase",
			Handler:    _Issuer_SignTokenPurchase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokens/issuer/issuer.proto",
}
