syntax = "proto3";

package lnrpc;

option go_package = "github.com/pkt-cash/pktd/lnd/lnrpc/tokens/replicator";

// Is mainly used to generate compatible querier (client)
//
// Generated client can be used to serve two main purposes:
//  - to interact with it via generated client
//  - to test generated client implementation by mocking generated server
//
service Replicator {
    // Returns available token offers
    rpc GetTokenOffers(TokenOffersFilter) returns (TokenOffers);

    // Verifies a signature of an issuer for this token purchase. This
    // method should be called before channel initialization
    rpc VerifyTokenPurchase(TokenPurchase) returns (CommonResult);

    // Registers token purchase to be tracked on the blockchain 
    // right after some necessary token purchase checks
    rpc RegisterTokenPurchase(TokenPurchase) returns (CommonResult);

    // Returns current token balances
    rpc GetTokenBalances(TokenBalancesFilter) returns (TokenBalances);
}

message TokenOffersFilter {
    string issuer_id = 1;
    Pagination params = 2;
}

message TokenOffers {
    repeated TokenOffer offers = 1;
    uint64 total = 2;
}

message TokenOffer {
    string token = 1;

    // TODO: discuss
    //  ? Should we assume decimal prices
    //  ? Add units field
    uint64 price = 2;

    IssuerInfo issuer_info = 3;

    // TODO: as soon as authentication of TokenWallet holder at Replicator would be implemented, 
    // this value should be revisioned
    string buyer_id = 4;

    // This field protects issuers from such a case, when potential buyer successfully acquires dozens 
    // of signatures just in case if that issuer would raise up the price later. If a Token Wallet 
    // holder would like to open channel with an outdated offer, Replicator would reject to register 
    // this purchase and buyer stays unprotected
    int64 valid_until_millis = 5;
}

message IssuerInfo {
    // This value is explicetely used by Replicator to uniquely identify related issuer later in order to ban him
    // (discredite case), since "identity_pubkey", "host" may be changed
    string id = 1;

    // The following field values are used to open payment channel, invoices commands execution etc.
    string identity_pubkey = 2;
    string host = 3;
}

message TokenPurchase {
    TokenOffer offer = 1;
    
    // Presents signature of offer. This signature is used to identify, 
    // that issuer accepts terms described in the offer and is responsible 
    // to follow them in this transaction. If signature is not valid, then 
    // channel should be closed. Otherwise, Replicator registers token 
    // purchase details provided and tracks blockchain for a closing transaction 
    // in order to determine if the issuer were not break terms
    string issuer_signature = 2;

    string initial_tx_hash = 3;
}

message CommonResult {
    bool succeded = 1;
    string error_description = 2;
}

message TokenBalancesFilter {
    Pagination params = 1;
}

message TokenBalances {
    repeated TokenBalance balances = 1;
    uint64 total = 2;
}

message TokenBalance {
    string token = 1;
    uint64 available = 2;
    uint64 frozen = 3;
}

message Pagination {
    uint64 limit = 1;
    uint64 offset = 2;
}

